{"version":3,"file":"static/js/250.a9b12540.chunk.js","mappings":"+KAwGA,UArGA,WACE,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4CF,EAAAA,EAAAA,UAAS,GAArD,eAAOG,EAAP,KAAuBC,EAAvB,KACMC,GAAYC,EAAAA,EAAAA,QAAO,MAmDzB,OAjDAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,iHAESC,MAAM,2EAAD,OACiDC,2BADjD,wCACiHA,4CAH/H,WAERC,EAFQ,QAMAC,GANA,wBAOZC,QAAQC,MACN,8CACAH,EAASI,QATC,KAWZF,QAXY,SAW0BF,EAASK,OAXnC,+BAWJF,MAXI,UAWE,iBAXF,kDAeKH,EAASM,OAfd,SAeRC,EAfQ,QAiBLC,OAASD,EAAKC,MAAMC,OAAS,GAE9BC,EAAiBH,EAAKC,MAAMG,QAChC,SAACC,GAAD,OAAWA,EAAMC,SAAWD,EAAMC,QAAQC,MAAML,QAAU,MAE5DlB,EAAUmB,IAEVR,QAAQC,MAAM,gCAxBF,kDA2BdD,QAAQC,MAAM,6BAAd,MA3Bc,0DAAH,qDA+BfN,MACC,KAiBD,gBAAKkB,KAAK,UAAUC,GAAG,UAAUC,UAAU,qBAA3C,UACE,iBAAKA,UAAU,yEAAf,WACE,gBAAKA,UAAU,OAAf,UACE,cAAGA,UAAU,uDAAb,wBAIF,iBAAKA,UAAU,6BAAf,WACE,SAAC,MAAD,CACEA,UAAU,8CACVC,QAzBQ,WAChB,GAAIxB,EAAUyB,QAAS,CACrB,IAAMC,EAAeC,KAAKC,IAAI5B,EAAUyB,QAAQI,YAAa,KAC7D9B,GAAkB,SAAC+B,GAAD,OAAkBA,EAAeJ,OAuB7CK,KAAM,MAER,gBACEC,IAAKhC,EACLiC,MAAO,CAAEC,UAAU,eAAD,OAAiBpC,EAAjB,QAClByB,UAAU,iFAHZ,SAKG3B,EAAOuC,KAAI,SAACjB,GACX,IAAQI,EAAOJ,EAAPI,GACR,OACE,gBAEEC,UAAU,2EAFZ,UAIE,mBACEA,UAAU,QACVH,MAAM,iBACNgB,QAAQ,8FACRC,IAAG,oCAA+Bf,EAAGgB,QAAlC,kBAPAhB,EAAGgB,eAahB,SAAC,MAAD,CACEf,UAAU,8CACVC,QA7CS,WACjB,GAAIxB,EAAUyB,QAAS,CACrB,IAAMC,EAAeC,KAAKC,IAAI5B,EAAUyB,QAAQI,YAAa,KAC7D9B,GAAkB,SAAC+B,GAAD,OAAkBA,EAAeJ,OA2C7CK,KAAM","sources":["pages/Youtube.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { MdChevronLeft, MdChevronRight } from \"react-icons/md\";\r\n\r\nfunction Youtube() {\r\n  const [videos, setVideos] = useState([]);\r\n  const [sliderPosition, setSliderPosition] = useState(0);\r\n  const sliderRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `https://youtube.googleapis.com/youtube/v3/search?part=snippet&channelId=${process.env.REACT_APP_CHANNEL_ID}&maxResults=4&order=date&key=${process.env.REACT_APP_API_KEY}`\r\n        );\r\n\r\n        if (!response.ok) {\r\n          console.error(\r\n            \"Error fetching video data. Response status:\",\r\n            response.status\r\n          );\r\n          console.error(\"Response text:\", await response.text());\r\n          return;\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.items && data.items.length > 0) {\r\n          // Exclude shorts\r\n          const filteredVideos = data.items.filter(\r\n            (video) => video.snippet && video.snippet.title.length >= 40\r\n          );\r\n          setVideos(filteredVideos);\r\n        } else {\r\n          console.error(\"No videos found in response!\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching video data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const slideLeft = () => {\r\n    if (sliderRef.current) {\r\n      const scrollAmount = Math.min(sliderRef.current.clientWidth, 500);\r\n      setSliderPosition((prevPosition) => prevPosition - scrollAmount);\r\n    }\r\n  };\r\n\r\n  const slideRight = () => {\r\n    if (sliderRef.current) {\r\n      const scrollAmount = Math.min(sliderRef.current.clientWidth, 500);\r\n      setSliderPosition((prevPosition) => prevPosition + scrollAmount);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div name=\"youtube\" id=\"youtube\" className=\"w-full md:h-screen\">\r\n      <div className=\"max-w-screen-lg mx-auto p-4 flex flex-col justify-center w-full h-full\">\r\n        <div className=\"pb-8\">\r\n          <p className=\"text-4xl font-bold inline border-b-4 border-blue-600\">\r\n            Youtube\r\n          </p>\r\n        </div>\r\n        <div className=\"relative flex items-center\">\r\n          <MdChevronLeft\r\n            className=\"opacity-50 cursor-pointer hover:opacity-100\"\r\n            onClick={slideLeft}\r\n            size={40}\r\n          />\r\n          <div\r\n            ref={sliderRef}\r\n            style={{ transofrm: `translateX(-${sliderPosition}px)` }}\r\n            className=\"w-full h-full overflow-x-scroll whitespace-nowrap scroll-smooth scrollbar-hide\"\r\n          >\r\n            {videos.map((video) => {\r\n              const { id } = video;\r\n              return (\r\n                <div\r\n                  key={id.videoId}\r\n                  className=\"inline-block p-2 cursor-pointer hover:scale-105 ease-in-out duration-300\"\r\n                >\r\n                  <iframe\r\n                    className=\"video\"\r\n                    title=\"Youtube player\"\r\n                    sandbox=\"allow-same-origin allow-forms allow-popups allow-scripts allow-presentation allowFullScreen\"\r\n                    src={`https://youtube.com/embed/${id.videoId}?autoplay=0`}\r\n                  ></iframe>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <MdChevronRight\r\n            className=\"opacity-50 cursor-pointer hover:opacity-100\"\r\n            onClick={slideRight}\r\n            size={40}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Youtube;\r\n"],"names":["useState","videos","setVideos","sliderPosition","setSliderPosition","sliderRef","useRef","useEffect","fetchData","fetch","process","response","ok","console","error","status","text","json","data","items","length","filteredVideos","filter","video","snippet","title","name","id","className","onClick","current","scrollAmount","Math","min","clientWidth","prevPosition","size","ref","style","transofrm","map","sandbox","src","videoId"],"sourceRoot":""}